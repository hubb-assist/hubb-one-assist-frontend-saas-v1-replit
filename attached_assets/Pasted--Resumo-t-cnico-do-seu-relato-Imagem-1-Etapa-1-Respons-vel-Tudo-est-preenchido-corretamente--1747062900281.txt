‚úÖ Resumo t√©cnico do seu relato
Imagem 1 ‚Äì Etapa 1: Respons√°vel

Tudo est√° preenchido corretamente.

Campos est√£o limpos, inputs respeitados, m√°scara de CPF e telefone funcionando.

Ao clicar em ‚ÄúPr√≥ximo‚Äù, vai para a etapa 2.

Imagem 2 ‚Äì Etapa 2: Endere√ßo

Aqui come√ßa o erro: os campos j√° aparecem com dados errados herdados da etapa anterior:

O campo ‚ÄúEndere√ßo‚Äù mostra o CPF.

O campo ‚ÄúN√∫mero‚Äù mostra o e-mail.

O campo ‚ÄúCEP‚Äù est√° travado, e mesmo digitando n√£o aparece nada.

O erro n√£o √© de cache, mas sim de preenchimento indevido no defaultValue ou no useForm().

Imagem 3 ‚Äì Ap√≥s for√ßar erro e validar

O formul√°rio volta a funcionar normalmente (valida os campos, exibe erros corretamente).

O CEP agora aceita input, e o log mostra que est√° chamando a API corretamente (Buscando CEP: 81200500).

Isso confirma que a m√°scara e integra√ß√£o de CEP est√£o certas ‚Äî o erro est√° mesmo no carregamento inicial da etapa.

üß† Diagn√≥stico t√©cnico preciso
Esse comportamento indica que o formul√°rio da etapa 2 est√° herdando o formContext da etapa 1, ou pior: est√° reusando os nomes de campos do formul√°rio anterior, como:

email, cpf, endereco, numero ‚Üí est√£o colidindo porque o form n√£o foi resetado, e os names s√£o conflitantes.

Provavelmente est√° acontecendo algo como:

tsx
Copiar
Editar
const form = useForm({ defaultValues: sharedFormData });
Ou o FormProvider foi aplicado sem isolar os campos de cada etapa.

üõ†Ô∏è Solu√ß√µes recomendadas (por prioridade):
‚úÖ 1. Isolar os campos de cada etapa
Use um formul√°rio separado por etapa, ou:

Use useFormContext() com FormProvider + shouldUnregister: true:

ts
Copiar
Editar
const form = useForm({
  shouldUnregister: true
});
‚úÖ 2. Resetar os campos ao trocar de etapa
Ao mudar para o step de endere√ßo, execute um form.reset() com valores em branco:

ts
Copiar
Editar
useEffect(() => {
  if (step === 2) {
    form.reset({
      cep: '',
      endereco: '',
      numero: '',
      cidade: '',
      estado: ''
    });
  }
}, [step]);
‚úÖ 3. Confirme que os name dos inputs est√£o corretos
Verifique se o name="endereco" do campo de endere√ßo n√£o est√° colidindo com campos como cpf, nome, email, etc.

‚úÖ Conclus√£o final
Voc√™ explicou perfeitamente o problema e os prints confirmam que:

O erro n√£o est√° no input de CEP ou na m√°scara.

O problema est√° no formul√°rio estar reaproveitando campos indevidamente entre etapas.

Ao for√ßar erro ou mexer no campo, o estado se corrige, o que prova que a estrutura e valida√ß√£o est√£o corretas ‚Äî o problema √© no carregamento inicial da etapa 2.
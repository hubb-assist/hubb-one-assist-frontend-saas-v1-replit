Vamos seguir com a TAREFA FRONT 026 — Cadastro de Pacientes (Criar). Abaixo está o código base React (com Tailwind, ShadCN, react-hook-form e Zod) para a tela de cadastro de pacientes, conforme sua especificação:

tsx
Copiar
Editar
// src/components/patients/PatientCreateForm.tsx
import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";
import api from "@/lib/api";
import { viaCepService } from "@/lib/api-subscribers";
import Spinner from "@/components/ui/spinner";

const schema = z.object({
  name: z.string().min(3),
  cpf: z.string().length(11),
  rg: z.string().min(5),
  birth_date: z.string(),
  phone: z.string().optional(),
  zip_code: z.string(),
  street: z.string(),
  number: z.string(),
  complement: z.string().optional(),
  district: z.string(),
  city: z.string(),
  state: z.string()
});

type FormData = z.infer<typeof schema>;

export default function PatientCreateForm() {
  const {
    register,
    handleSubmit,
    setValue,
    watch,
    formState: { errors, isSubmitting }
  } = useForm<FormData>({
    resolver: zodResolver(schema)
  });

  const zip = watch("zip_code");

  React.useEffect(() => {
    if (zip?.length === 8) {
      viaCepService.getAddressByCep(zip).then(data => {
        if (data) {
          setValue("street", data.street);
          setValue("district", data.district);
          setValue("city", data.city);
          setValue("state", data.state);
        }
      });
    }
  }, [zip]);

  const onSubmit = async (data: FormData) => {
    try {
      const response = await api.post("/patients/", data, {
        withCredentials: true
      });
      toast.success("Paciente cadastrado com sucesso!");
    } catch (err: any) {
      console.error(err);
      toast.error("Erro ao cadastrar paciente");
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4 max-w-xl">
      <Input {...register("name")} placeholder="Nome completo" />
      <Input {...register("cpf")} placeholder="CPF" />
      <Input {...register("rg")} placeholder="RG" />
      <Input {...register("birth_date")} type="date" placeholder="Data de nascimento" />
      <Input {...register("phone")} placeholder="Telefone (opcional)" />
      <Input {...register("zip_code")} placeholder="CEP" />
      <Input {...register("street")} placeholder="Logradouro" />
      <Input {...register("number")} placeholder="Número" />
      <Input {...register("complement")} placeholder="Complemento (opcional)" />
      <Input {...register("district")} placeholder="Bairro" />
      <Input {...register("city")} placeholder="Cidade" />
      <Input {...register("state")} placeholder="Estado" />
      <Button type="submit" disabled={isSubmitting}>
        {isSubmitting ? <Spinner /> : "Salvar"}
      </Button>
    </form>
  );
}
Observações:
O componente consulta a API ViaCEP automaticamente quando o CEP tem 8 dígitos.

O botão "Salvar" exibe um spinner enquanto a requisição é enviada.

O formulário não será renderizado caso o usuário não tenha a permissão CAN_CREATE_PATIENT (você deve usar um wrapper condicional no componente-pai).
Ótimo! Agora vamos continuar aplicando o padrão DDD/SOLID/Clean Code ao frontend com:

✅ 1. PatientDetailsPage.tsx — Visualização detalhada de um paciente
📁 Local: src/pages/patient/PatientDetailsPage.tsx (ou ajuste conforme sua rota)

tsx
Copiar
Editar
import { useEffect, useState } from "react";
import { useParams } from "react-router-dom"; // ou seu sistema de rotas
import { useGetPatient } from "@/domain/patient/useCases";
import { Patient } from "@/domain/patient/types";
import { Card } from "@/components/ui/card";

export function PatientDetailsPage() {
  const { id } = useParams<{ id: string }>();
  const { fetchById } = useGetPatient();
  const [patient, setPatient] = useState<Patient | null>(null);

  useEffect(() => {
    if (id) {
      fetchById(id).then(setPatient);
    }
  }, [id]);

  if (!patient) return <p>Carregando...</p>;

  return (
    <Card className="p-6 space-y-2">
      <h2 className="text-xl font-semibold">{patient.name}</h2>
      <p>CPF: {patient.cpf}</p>
      <p>RG: {patient.rg}</p>
      <p>Telefone: {patient.phone}</p>
      <p>Data de nascimento: {patient.birth_date}</p>
      <p>Endereço: {patient.address}, {patient.number} — {patient.district}, {patient.city} - {patient.state}</p>
      <p>CEP: {patient.cep}</p>
    </Card>
  );
}
✅ 2. UpdatePatientForm.tsx — Edição de paciente
📁 Local: src/components/patient/UpdatePatientForm.tsx

tsx
Copiar
Editar
import { useForm } from "react-hook-form";
import { useEffect } from "react";
import { useGetPatient, useUpdatePatient } from "@/domain/patient/useCases";
import { PatientFormData } from "@/domain/patient/types";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { useParams } from "react-router-dom";

export function UpdatePatientForm() {
  const { id } = useParams<{ id: string }>();
  const { fetchById } = useGetPatient();
  const { handleUpdate } = useUpdatePatient();
  const { register, handleSubmit, reset } = useForm<PatientFormData>();

  useEffect(() => {
    if (id) {
      fetchById(id).then((data) => {
        reset(data);
      });
    }
  }, [id]);

  const onSubmit = async (data: PatientFormData) => {
    if (id) {
      await handleUpdate(id, data);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <Label>Nome</Label>
      <Input {...register("name")} />

      <Label>CPF</Label>
      <Input {...register("cpf")} />

      <Label>Data de Nascimento</Label>
      <Input type="date" {...register("birth_date")} />

      {/* ... restante dos campos ... */}

      <Button type="submit">Atualizar paciente</Button>
    </form>
  );
}
✅ 3. useHasPermission.ts — Centralização de permissões
📁 Local: src/hooks/useHasPermission.ts

ts
Copiar
Editar
import { useAuth } from "@/hooks/useAuth";

export function useHasPermission(permission: string): boolean {
  const { user } = useAuth();
  return user?.permissions?.includes(permission);
}
Uso nos componentes:
tsx
Copiar
Editar
import { useHasPermission } from "@/hooks/useHasPermission";

const canDelete = useHasPermission("CAN_DELETE_PATIENT");

return canDelete && (
  <Button onClick={handleDelete} variant="destructive">
    Excluir
  </Button>
);
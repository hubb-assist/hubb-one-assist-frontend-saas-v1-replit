‚úÖ 1. Componente PatientForm.tsx
üìÅ Local: src/components/patient/PatientForm.tsx

tsx
Copiar
Editar
import { useForm } from "react-hook-form";
import { PatientFormData } from "@/domain/patient/types";
import { useCreatePatient } from "@/domain/patient/useCases";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

export function PatientForm() {
  const { register, handleSubmit, reset } = useForm<PatientFormData>();
  const { handleCreate } = useCreatePatient();

  const onSubmit = async (data: PatientFormData) => {
    await handleCreate(data);
    reset();
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      <div>
        <Label htmlFor="name">Nome</Label>
        <Input id="name" {...register("name")} />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="cpf">CPF</Label>
          <Input id="cpf" {...register("cpf")} />
        </div>
        <div>
          <Label htmlFor="rg">RG</Label>
          <Input id="rg" {...register("rg")} />
        </div>
      </div>

      <div>
        <Label htmlFor="birth_date">Data de nascimento</Label>
        <Input type="date" id="birth_date" {...register("birth_date")} />
      </div>

      <div>
        <Label htmlFor="phone">Telefone</Label>
        <Input id="phone" {...register("phone")} />
      </div>

      <div>
        <Label htmlFor="cep">CEP</Label>
        <Input id="cep" {...register("cep")} />
      </div>

      <div>
        <Label htmlFor="address">Endere√ßo</Label>
        <Input id="address" {...register("address")} />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="number">N√∫mero</Label>
          <Input id="number" {...register("number")} />
        </div>
        <div>
          <Label htmlFor="complement">Complemento</Label>
          <Input id="complement" {...register("complement")} />
        </div>
      </div>

      <div>
        <Label htmlFor="district">Bairro</Label>
        <Input id="district" {...register("district")} />
      </div>

      <div className="grid grid-cols-2 gap-4">
        <div>
          <Label htmlFor="city">Cidade</Label>
          <Input id="city" {...register("city")} />
        </div>
        <div>
          <Label htmlFor="state">Estado</Label>
          <Input id="state" {...register("state")} />
        </div>
      </div>

      <Button type="submit" className="w-full">
        Criar paciente
      </Button>
    </form>
  );
}
‚úÖ 2. Componente PatientList.tsx
üìÅ Local: src/components/patient/PatientList.tsx

tsx
Copiar
Editar
import { useEffect, useState } from "react";
import { useListPatients, useDeletePatient } from "@/domain/patient/useCases";
import { Patient } from "@/domain/patient/types";
import { Button } from "@/components/ui/button";

export function PatientList() {
  const [patients, setPatients] = useState<Patient[]>([]);
  const { fetch } = useListPatients();
  const { handleDelete } = useDeletePatient();

  useEffect(() => {
    (async () => {
      const result = await fetch();
      setPatients(result);
    })();
  }, []);

  const onDelete = async (id: string) => {
    await handleDelete(id);
    setPatients((prev) => prev.filter((p) => p.id !== id));
  };

  return (
    <div className="space-y-4">
      {patients.map((patient) => (
        <div key={patient.id} className="border p-4 rounded shadow">
          <h3 className="font-bold text-lg">{patient.name}</h3>
          <p className="text-sm">CPF: {patient.cpf}</p>
          <p className="text-sm">Nascimento: {patient.birth_date}</p>
          <Button variant="destructive" onClick={() => onDelete(patient.id)}>
            Excluir
          </Button>
        </div>
      ))}
    </div>
  );
}
‚úÖ 3. Hook useSidebarItems para gerar menus din√¢micos
üìÅ Local: src/hooks/useSidebarItems.ts

ts
Copiar
Editar
type UserRole = "SUPER_ADMIN" | "DONO_ASSINANTE" | "COLABORADOR" | "DIRETOR";

interface SidebarItem {
  label: string;
  href: string;
  permission?: string;
}

export function useSidebarItems(role: UserRole): SidebarItem[] {
  const baseItems: SidebarItem[] = [
    { label: "Dashboard", href: "/dashboard" },
  ];

  const roleSpecific: Record<UserRole, SidebarItem[]> = {
    SUPER_ADMIN: [
      { label: "Assinantes", href: "/admin/subscribers" },
      { label: "Usu√°rios", href: "/admin/users" },
    ],
    DONO_ASSINANTE: [
      { label: "Pacientes", href: "/clinica/patients" },
      { label: "Agenda", href: "/clinica/agenda" },
    ],
    COLABORADOR: [
      { label: "Pacientes", href: "/clinica/patients" },
    ],
    DIRETOR: [
      { label: "Indicadores", href: "/clinica/financeiro" },
    ],
  };

  return [...baseItems, ...(roleSpecific[role] || [])];
}
Voc√™ pode usar assim:

tsx
Copiar
Editar
const items = useSidebarItems(currentUser.role);